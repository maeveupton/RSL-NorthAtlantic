#' Adding Noisy Input to the dataframe
#'
#' @param model_run JAGS output
#' @param data Input data
#' @param data_grid Input data grid
#' @param spline_nseg_t Number of segments used to create basis functions for NIGAM temporal component
#' @param spline_nseg_st Number of segments used to create basis functions for NIGMA spatial temporal component
add_noisy_input <- function(model_run,
                            jags_data,
                            data,
                            data_grid,
                            spline_nseg_t,
                            spline_nseg_st) {
    #-----Get posterior samples for SL-----
    intercept_post <- model_run$BUGSoutput$sims.list$intercept
    b_c_post <- model_run$BUGSoutput$sims.list$b_c
    b_g_post <- model_run$BUGSoutput$sims.list$b_g
    
    pred_mean_calc <- function(t_new) {
      # Create the regional basis functions
      B_c <- bs_bbase_t(t_new,
                        xl = min(data$Age),
                        xr = max(data$Age),
                        spline_nseg_t = spline_nseg_t,
                        data = data
      )
      #----Deriv----
      return(intercept_post[data$SiteName] + B_c %*% colMeans(b_c_post)+ b_g_post[data$SiteName] * (t_new))
  
    }
    #-------Now create derivatives---
    h <- 0.01
    t <- data$Age
    deriv <- (pred_mean_calc(t + h) - pred_mean_calc(t - h)) / (2 * h)
    # Predicted data
    pred_mean_calc_grid <- function(t_new) {
      # Create the regional basis functions
      B_c <- bs_bbase_t(t_new,
                        xl = min(data$Age),
                        xr = max(data$Age),
                        spline_nseg_t = spline_nseg_t,
                        data = data
      )
      #----Deriv----
      return(intercept_post[data_grid$SiteName] + B_c %*% colMeans(b_c_post) + b_g_post[data_grid$SiteName] * (t_new))
    }
    t_grid <- data_grid$Age
    deriv_grid <- (pred_mean_calc_grid(t_grid + h) - pred_mean_calc_grid(t_grid - h)) / (2 * h)
  
  # Add this new term in - this is the extra standard deviation on each term----
  data$NI_var_term <- sqrt(deriv^2 %*% data$Age_err^2)[, 1]
  
  # Writing new dataframe with noisy extra column------
  data <- data.frame(data)
  data_grid <- data.frame(data_grid)
  update_input_df <- list(data = data,
                          data_grid = data_grid)
  return(update_input_df)
}
  

#' Creating basis function for splines
#'
#' @param data Input data
#' @param data_grid Prediction data
#' @param model_type Type of model
#' @param spline_nseg_t Number of segments for the creation of the basis functions
#' @param spline_nseg_t Number of segments for the creation of the basis functions for NIGAM temporal component
#' @param spline_nseg_st Number of segments for the creation of the basis functions for NIGAM spatial temporal component
#' @param xl Minimum value for the basis function for splines
#' @param xr Maximum value for the basis function for splines
#' @noRd


spline_basis_fun <- function(data,
                             data_grid,
                             north_data,
                             south_data,
                             north_data_grid,
                             south_data_grid,
                             spline_nseg,
                             spline_nseg_st,
                             spline_nseg_t,
                             xl,
                             xr) {
  
  # Basis functions in time for common component-----------------------
  B_c <- bs_bbase_t(data$Age,
                    xl = min(data$Age),
                    xr = max(data$Age),
                    spline_nseg_t = spline_nseg_t,
                    data = data
  )
  # Finding derivative  of basis functions using first principals-----------
  first_deriv_calc <- function(t_new) {
    # Create the regional basis functions
    B_c <- bs_bbase_t(t_new,
                      xl = min(data$Age),
                      xr = max(data$Age),
                      spline_nseg_t = spline_nseg_t,
                      data = data
    )
    return(B_c)
  }
  # Now create derivatives----------------------
  h <- 0.00001 # h <- 0.001
  t <- data$Age
  first_deriv_step1 <- first_deriv_calc(t + h)
  first_deriv_step2 <- first_deriv_calc(t - h)
  B_c_deriv <- (first_deriv_step1 - first_deriv_step2) / (2 * h)
  
  # Basis functions in time using prediction data frame-----------------------
  B_c_pred <- bs_bbase_t(data_grid$Age,
                         xl = min(data$Age),
                         xr = max(data$Age),
                         spline_nseg_t = spline_nseg_t,
                         data = data
  )
  # Now create derivatives----------------------
  h <- 0.00001 # h <- 0.001
  t_pred <- data_grid$Age
  first_deriv_step1 <- first_deriv_calc(t_pred + h)
  first_deriv_step2 <- first_deriv_calc(t_pred - h)
  B_c_pred_deriv <- (first_deriv_step1 - first_deriv_step2) / (2 * h)
  
  # Basis functions in time for regional component-----------------------
    B_t <- bs_bbase_t(data$Age,
                      xl = min(data$Age),
                      xr = max(data$Age),
                      spline_nseg_t = spline_nseg_t,
                      data = data
    )
    # Finding derivative  of basis functions using first principals-----------
    first_deriv_calc <- function(t_new) {
      # Create the regional basis functions
      B_t <- bs_bbase_t(t_new,
                        xl = min(data$Age),
                        xr = max(data$Age),
                        spline_nseg_t = spline_nseg_t,
                        data = data
      )
      return(B_t)
    }
    # Now create derivatives----------------------
    h <- 0.00001 # h <- 0.001
    t <- data$Age
    first_deriv_step1 <- first_deriv_calc(t + h)
    first_deriv_step2 <- first_deriv_calc(t - h)
    B_t_deriv <- (first_deriv_step1 - first_deriv_step2) / (2 * h)
    
    # Basis functions in time using prediction data frame-----------------------
    B_t_pred <- bs_bbase_t(data_grid$Age,
                           xl = min(data$Age),
                           xr = max(data$Age),
                           spline_nseg_t = spline_nseg_t,
                           data = data
    )
    # Now create derivatives----------------------
    h <- 0.00001 # h <- 0.001
    t_pred <- data_grid$Age
    first_deriv_step1 <- first_deriv_calc(t_pred + h)
    first_deriv_step2 <- first_deriv_calc(t_pred - h)
    B_t_pred_deriv <- (first_deriv_step1 - first_deriv_step2) / (2 * h)

    
    # north data
    # Basis functions in time for data-----------------------
    B_t_north <- bs_bbase_t(north_data$Age,
                      xl = min(data$Age),
                      xr = max(data$Age),
                      spline_nseg_t = spline_nseg_t,
                      data = data
    )
    # Finding derivative  of basis functions using first principals-----------
    first_deriv_calc <- function(t_new) {
      # Create the regional basis functions
      B_t <- bs_bbase_t(t_new,
                        xl = min(data$Age),
                        xr = max(data$Age),
                        spline_nseg_t = spline_nseg_t,
                        data = data
      )
      return(B_t)
    }
    # Now create derivatives----------------------
    h <- 0.00001 # h <- 0.001
    t_north <- north_data$Age
    first_deriv_step1 <- first_deriv_calc(t_north + h)
    first_deriv_step2 <- first_deriv_calc(t_north - h)
    B_t_deriv_north <- (first_deriv_step1 - first_deriv_step2) / (2 * h)
    
    # Basis functions in time using prediction data frame-----------------------
    B_t_pred_north <- bs_bbase_t(north_data_grid$Age,
                           xl = min(data$Age),
                           xr = max(data$Age),
                           spline_nseg_t = spline_nseg_t,
                           data = data
    )
    # Now create derivatives----------------------
    h <- 0.00001 # h <- 0.001
    t_pred_north <- data_grid$Age
    first_deriv_step1 <- first_deriv_calc(t_pred_north + h)
    first_deriv_step2 <- first_deriv_calc(t_pred_north - h)
    B_t_pred_deriv_north <- (first_deriv_step1 - first_deriv_step2) / (2 * h)
    
    
    
    # south data
    # Basis functions in time for data-----------------------
    B_t_south <- bs_bbase_t(south_data$Age,
                           xl = min(data$Age),
                           xr = max(data$Age),
                           spline_nseg_t = spline_nseg_t,
                           data = data
    )
    # Finding derivative  of basis functions using first principals-----------
    first_deriv_calc <- function(t_new) {
      # Create the regional basis functions
      B_t <- bs_bbase_t(t_new,
                        xl = min(data$Age),
                        xr = max(data$Age),
                        spline_nseg_t = spline_nseg_t,
                        data = data
      )
      return(B_t)
    }
    # Now create derivatives----------------------
    h <- 0.00001 # h <- 0.001
    t_south <- south_data$Age
    first_deriv_step1 <- first_deriv_calc(t_south + h)
    first_deriv_step2 <- first_deriv_calc(t_south - h)
    B_t_deriv_south <- (first_deriv_step1 - first_deriv_step2) / (2 * h)
    
    # Basis functions in time using prediction data frame-----------------------
    B_t_pred_south <- bs_bbase_t(south_data_grid$Age,
                                xl = min(data$Age),
                                xr = max(data$Age),
                                spline_nseg_t = spline_nseg_t,
                                data = data
    )
    # Now create derivatives----------------------
    h <- 0.00001 # h <- 0.001
    t_pred_south <- data_grid$Age
    first_deriv_step1 <- first_deriv_calc(t_pred_south + h)
    first_deriv_step2 <- first_deriv_calc(t_pred_south - h)
    B_t_pred_deriv_south <- (first_deriv_step1 - first_deriv_step2) / (2 * h)
    
    
        
    
    # Basis functions in space time for data-----------------------
    B_time <- bs_bbase_st(data$Age,
                          xl = min(data$Age),
                          xr = max(data$Age),
                          spline_nseg_st = spline_nseg_st,
                          data = data
    )
    B_space_1 <- bs_bbase_st(data$Latitude,
                             xl = min(data$Latitude),
                             xr = max(data$Latitude),
                             spline_nseg_st = spline_nseg_st,
                             data = data
    )
    B_space_2 <- bs_bbase_st(data$Longitude,
                             xl = min(data$Longitude),
                             xr = max(data$Longitude),
                             spline_nseg_st = spline_nseg_st,
                             data = data
    )
    
    B_st_full <- matrix(NA,
                        ncol = ncol(B_time) * ncol(B_space_1) * ncol(B_space_1),
                        nrow = nrow(data)
    )
    regional_knots_loc <- rep(NA,
                              ncol = ncol(B_time) * ncol(B_space_1) * ncol(B_space_1)
    )
    count <- 1
    for (i in 1:ncol(B_time)) {
      for (j in 1:ncol(B_space_1)) {
        for (k in 1:ncol(B_space_2)) {
          regional_knots_loc[count] <- i
          B_st_full[, count] <- B_time[, i] * B_space_1[, j] * B_space_2[, k]
          count <- count + 1
        }
      }
    }
    
    # Get rid of all the columns which are just zero
    B_st <- B_st_full[, -which(colSums(B_st_full) < 0.1)]
    
    # Find the index here that you remove then use this in the derivative
    remove_col_index <- which(colSums(B_st_full) < 0.1)
    
    first_deriv_calc <- function(t_new) {
      # Now the local basis functions
      B_time <- bs_bbase_st(t_new,
                            xl = min(data$Age),
                            xr = max(data$Age),
                            spline_nseg_st = spline_nseg_st,
                            data = data
      )
      B_space_1 <- bs_bbase_st(data$Latitude,
                               xl = min(data$Latitude),
                               xr = max(data$Latitude),
                               spline_nseg_st = spline_nseg_st,
                               data = data
      )
      B_space_2 <- bs_bbase_st(data$Longitude,
                               xl = min(data$Longitude),
                               xr = max(data$Longitude),
                               spline_nseg_st = spline_nseg_st,
                               data = data
      )
      
      B_st_full <- matrix(NA,
                          ncol = ncol(B_time) * ncol(B_space_1) * ncol(B_space_1),
                          nrow = nrow(data)
      )
      regional_knots_loc <- rep(NA, ncol = ncol(B_time) * ncol(B_space_1) * ncol(B_space_1))
      count <- 1
      for (i in 1:ncol(B_time)) {
        for (j in 1:ncol(B_space_1)) {
          for (k in 1:ncol(B_space_2)) {
            regional_knots_loc[count] <- i
            B_st_full[, count] <- B_time[, i] * B_space_1[, j] * B_space_2[, k]
            count <- count + 1
          }
        }
      }
      
      # Get rid of all the columns which are just zero
      B_st <- B_st_full[, -which(colSums(B_st_full) < 0.1)]
      return(B_st)
    }
    #-------Now create derivatives----
    h <- 0.00001
    t <- data$Age
    
    first_deriv_step1 <- first_deriv_calc(t + h)
    first_deriv_step2 <- first_deriv_calc(t - h)
    B_st_deriv <- (first_deriv_step1 - first_deriv_step2) / (2 * h)
    
    
    # Basis functions in space time using prediction data frame-----------------------
    B_pred_time <- bs_bbase_st(data_grid$Age,
                               xl = min(data$Age),
                               xr = max(data$Age),
                               spline_nseg_st = spline_nseg_st,
                               data = data
    )
    B_space_1 <- bs_bbase_st(data_grid$Latitude,
                             xl = min(data$Latitude),
                             xr = max(data$Latitude),
                             spline_nseg_st = spline_nseg_st,
                             data = data
    )
    B_space_2 <- bs_bbase_st(data_grid$Longitude,
                             xl = min(data$Longitude),
                             xr = max(data$Longitude),
                             spline_nseg_st = spline_nseg_st,
                             data = data
    )
    
    suppressWarnings({
      B_st_pred_full <- matrix(NA,
                               ncol = ncol(B_pred_time) * ncol(B_space_1) * ncol(B_space_1),
                               nrow = nrow(data_grid)
      )
      regional_knots_loc <- rep(NA,
                                ncol = ncol(B_pred_time) * ncol(B_space_1) * ncol(B_space_1)
      )
      count <- 1
      for (i in 1:ncol(B_pred_time)) {
        for (j in 1:ncol(B_space_1)) {
          for (k in 1:ncol(B_space_2)) {
            regional_knots_loc[count] <- i
            B_st_pred_full[, count] <- B_pred_time[, i] * B_space_1[, j] * B_space_2[, k]
            count <- count + 1
          }
        }
      }
      
      # Get rid of all the columns which are just zero corresponding to the previous basis functions
      B_st_pred <- B_st_pred_full[, -remove_col_index]
    })
    #-------Now create derivatives for prediciton----
    first_deriv_calc <- function(t_new) {
      # Now the local basis functions
      B_time <- bs_bbase_st(t_new,
                            xl = min(data$Age),
                            xr = max(data$Age),
                            spline_nseg_st = spline_nseg_st,
                            data = data
      )
      B_space_1 <- bs_bbase_st(data_grid$Latitude,
                               xl = min(data$Latitude),
                               xr = max(data$Latitude),
                               spline_nseg_st = spline_nseg_st,
                               data = data
      )
      B_space_2 <- bs_bbase_st(data_grid$Longitude,
                               xl = min(data$Longitude),
                               xr = max(data$Longitude),
                               spline_nseg_st = spline_nseg_st,
                               data = data
      )
      
      B_st_full <- matrix(NA,
                          ncol = ncol(B_time) * ncol(B_space_1) * ncol(B_space_1),
                          nrow = nrow(data_grid)
      )
      regional_knots_loc <- rep(NA, ncol = ncol(B_time) * ncol(B_space_1) * ncol(B_space_1))
      count <- 1
      for (i in 1:ncol(B_time)) {
        for (j in 1:ncol(B_space_1)) {
          for (k in 1:ncol(B_space_2)) {
            regional_knots_loc[count] <- i
            B_st_full[, count] <- B_time[, i] * B_space_1[, j] * B_space_2[, k]
            count <- count + 1
          }
        }
      }
      
      # Get rid of all the columns which are just zero
      B_st <- B_st_full[, -remove_col_index]
      return(B_st)
    }
    h <- 0.00001
    t_pred <- data_grid$Age
    
    first_deriv_step1 <- first_deriv_calc(t_pred + h)
    first_deriv_step2 <- first_deriv_calc(t_pred - h)
    B_st_deriv_pred <- (first_deriv_step1 - first_deriv_step2) / (2 * h)
    
    # Derivative of Basis function for the total model fit-----------------
    first_deriv_calc <- function(t_new) {
      # Create the regional basis functions
      B_t <- bs_bbase_t(t_new,
                        xl = min(data$Age),
                        xr = max(data$Age),
                        spline_nseg_t = spline_nseg_t,
                        data = data
      )
      colnames(B_t) <- c(paste("B_t", 1:ncol(B_t), sep = ""))
      
      # Now the local basis functions
      B_time <- bs_bbase_st(t_new,
                            xl = min(data$Age),
                            xr = max(data$Age),
                            spline_nseg_st = spline_nseg_st,
                            data = data
      )
      B_space_1 <- bs_bbase_st(data$Latitude,
                               xl = min(data$Latitude),
                               xr = max(data$Latitude),
                               spline_nseg_st = spline_nseg_st,
                               data = data
      )
      B_space_2 <- bs_bbase_st(data$Longitude,
                               xl = min(data$Longitude),
                               xr = max(data$Longitude),
                               spline_nseg_st = spline_nseg_st,
                               data = data
      )
      
      B_st_full <- matrix(NA,
                          ncol = ncol(B_time) * ncol(B_space_1) * ncol(B_space_1),
                          nrow = nrow(data)
      )
      regional_knots_loc <- rep(NA, ncol = ncol(B_time) * ncol(B_space_1) * ncol(B_space_1))
      count <- 1
      for (i in 1:ncol(B_time)) {
        for (j in 1:ncol(B_space_1)) {
          for (k in 1:ncol(B_space_2)) {
            regional_knots_loc[count] <- i
            B_st_full[, count] <- B_time[, i] * B_space_1[, j] * B_space_2[, k]
            count <- count + 1
          }
        }
      }
      
      # Get rid of all the columns which are just zero
      B_st <- B_st_full[, -which(colSums(B_st_full) < 0.1)]
      colnames(B_st) <- c(paste("B_st", 1:ncol(B_st), sep = ""))
      # Dummy matrix for intercept & GIA
      B_h <- fastDummies::dummy_cols(data.frame(data$SiteName))
      B_h <- B_h[, -1]
      colnames(B_h) <- c(paste("B_h", 1:ncol(B_h), sep = ""))
      B_g <- B_h * t_new
      colnames(B_g) <- c(paste("B_g", 1:ncol(B_g), sep = ""))
      # Basis function matrix with B_local & B_regional
      output_B_tot <- cbind(
        B_h, B_g,
        B_t, B_st
      )
      
      
      return(output_B_tot)
    }
    #-------Now create derivatives----
    h <- 0.00001
    t <- data$Age
    
    first_deriv_step1 <- first_deriv_calc(t + h)
    first_deriv_step2 <- first_deriv_calc(t - h)
    B_tot_deriv <- (first_deriv_step1 - first_deriv_step2) / (2 * h)
    
    # New basis function for site specific vertical offset----------
    B_h_deriv <- as.matrix(B_tot_deriv[, grepl("B_h", names(B_tot_deriv))])
    # New Basis Functions for Random linear local component-Site Specific slope-------
    B_deriv_g_re <- as.matrix(B_tot_deriv[, grepl("B_g", names(B_tot_deriv))])
    # New Basis Functions for spline in time-------------------------
    B_deriv_t <- as.matrix(B_tot_deriv[, grepl("B_t", names(B_tot_deriv))])
    # New Basis Functions in Space time-------------------------------
    B_deriv_st <- as.matrix(B_tot_deriv[, grepl("B_st", names(B_tot_deriv))])
    
    # All Basis Functions
    spline_basis_fun_list <- list(
      B_c = B_c,
      B_c_pred=B_c_pred,
      B_c_deriv = B_c_deriv,
      B_c_pred_deriv = B_c_pred_deriv,
      remove_col_index = remove_col_index,
      B_st = B_st,
      B_st_deriv = B_st_deriv,
      B_st_pred = B_st_pred,
      B_st_deriv_pred = B_st_deriv_pred,
      B_t = B_t,
      B_t_north = B_t_north,
      B_t_pred_north = B_t_pred_north,
      B_t_deriv_north = B_t_deriv_north,
      B_t_pred_deriv_north = B_t_pred_deriv_north,
      B_t_south = B_t_south,
      B_t_pred_south = B_t_pred_south,
      B_t_deriv_south = B_t_deriv_south,
      B_t_pred_deriv_south = B_t_pred_deriv_south,
      B_t_deriv = B_t_deriv,
      B_t_pred = B_t_pred,
      B_t_pred_deriv = B_t_pred_deriv,
      B_h_deriv = B_h_deriv,
      B_deriv_g_re = B_deriv_g_re,
      B_tot_deriv = B_tot_deriv,
      B_deriv_t = B_deriv_t,
      B_deriv_st = B_deriv_st
    )
  
  
  
  return(spline_basis_fun_list)
}

#' Creating spline basis functions for NIGAM for the temporal component
# Basis function approach
bs_bbase_t <- function(x,
                       xl =  min(x),
                       xr = max(x),
                       deg = 3,
                       spline_nseg_t = NULL,
                       data = data) {
  # Create basis functions------------------------------------------------------
  if (is.null(spline_nseg_t)) {
    spline_nseg_t <- round(deg / (1 + deg / length(data$Age)))
  }
  
  # Compute the length of the partitions
  dx <- (xr - xl) / spline_nseg_t
  # Create equally spaced knots
  knots <- seq(xl - deg * dx,
               xr + deg * dx,
               by = dx
  )
  
  # Use bs() function to generate the B-spline basis
  bs_matrix <- matrix(
    splines::bs(x,
                degree = deg,
                knots = knots,
                Boundary.knots = c(knots[1], knots[length(knots)])
    ),
    nrow = length(x)
  )
  return(bs_matrix)
}

#' Creating spline basis functions for NIGAM spatial temporal component
# Basis function approach
bs_bbase_st <- function(x,
                        xl = min(x),
                        xr = max(x),
                        deg = 3,
                        spline_nseg_st = NULL,
                        data = data) {
  # Create basis functions------------------------------------------------------
  if (is.null(spline_nseg_st)) {
    spline_nseg_st <- round(deg / (1 + deg / length(data$Age)))
  }
  
  # Compute the length of the partitions
  dx <- (xr - xl) / spline_nseg_st
  # Create equally spaced knots
  knots <- seq(xl - deg * dx,
               xr + deg * dx,
               by = dx
  )
  
  # Use bs() function to generate the B-spline basis
  bs_matrix <- matrix(
    splines::bs(x,
                degree = deg,
                knots = knots,
                Boundary.knots = c(knots[1], knots[length(knots)])
    ),
    nrow = length(x)
  )
  return(bs_matrix)
}